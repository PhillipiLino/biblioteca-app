name: Flutter release
on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      # Push events to branches matching refs/heads/releases/10
      - "release/**"
#on: [push]
# on:
#   release:
#     types: [published]

jobs:
  release:
    name: Test, build and release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Get versions
        id: step_one
        run: |
          echo "release_version=$(echo ${{ github.ref }} | cut -d"/" -f4)" >> $GITHUB_ENV
          echo "old_version=$(echo `grep -w ^version\: pubspec.yaml`)" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: beta
      - name: Flutter version
        run: flutter --version

      - name: Set new version on pubspec
        run: |
          if [[ "${{ env.release_version }}" =~ ^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$ ]]; then echo "Branch OK"; else exit 1; fi
          sed -i "s/${{ env.old_version}}/version: ${{ env.release_version }}+8/g" pubspec.yaml

      # - name: Cache pub dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.FLUTTER_HOME }}/.pub-cache
      #     key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
      #     restore-keys: ${{ runner.os }}-pub-
      # - name: Download pub dependencies
      #   run: flutter pub get

      # - name: Run build_runner
      #   run: flutter pub run build_runner build --delete-conflicting-outputs

      # - name: Run analyzer
      #   run: flutter analyze

      # - name: Run tests
      #   run: flutter test

      # - name: Create tag
      #   run: |
      #     git config --global user.name 'PhillipiLino'
      #     git config --global user.email 'phillipilino@users.noreply.github.com'
      #     git remote set-url origin https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/$GITHUB_REPOSITORY
      #     git tag ${{ env.release_version }}
      #     git push origin "${{ env.release_version }}"

      # - name: Download Android keystore
      #   id: android_keystore
      #   uses: timheuer/base64-to-file@v1.0.3
      #   with:
      #     fileName: key.jks
      #     encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      # - name: Create key.properties
      #   run: |
      #     echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
      #     echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
      #     echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
      #     echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties

      # - name: Build Android App Bundle
      #   run: flutter build appbundle

      # - name: Setup Ruby
      #   uses: actions/setup-ruby@v1
      #   with:
      #     ruby-version: "2.6"

      # - name: Cache bundle dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: ${{ runner.os }}-gems-

      # - name: Download bundle dependencies
      #   run: |
      #     gem install bundler:2.0.2
      #     bundle config path vendor/bundle
      #     bundle install

      # - name: Release to Google Play (beta)
      #   env:
      #     SUPPLY_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
      #     SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      #   run: |
      #     bundle exec fastlane supply \
      #     --aab build/app/outputs/bundle/release/app-release.aab \
      #     --track alpha

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.release_version }}
          release_name: Release ${{ env.release_version }}
          body: |
            # üöÄ Features
            - Feature
            # üêõ Bug Fixes
            - Bugfix
          draft: true
          prerelease: false
